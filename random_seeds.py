from collections import namedtuple
from random import choice as PICK
from random import uniform as RND
import calculations
from tk_colors import all_colors as colors
BallOptionsSeeded = namedtuple('BallOptionsSeeded', 'N, X, Y, R, V, C')
class Ball:
    def __init__(self, number, center, radius, velocity, color):
        self.n = number
        self.position = center
        self.radius = radius
        self.velocity = velocity
        self.color = color
        self.edges = calculations.ball_edge_values(self.position, self.radius)
        self.last_hit = self
        self.number_hit = 0
        self.total_hits = 0
random_x_li = [RND(0.01, 0.99) for i in range(0, 25)]
random_y_li = [RND(0.01, 0.99) for i in range(0, 25)]
random_r_li = [RND(0.03, 0.05) for i in range(0, 25)]
random_v_li = [RND(0.0005, 0.0075) for i in range(0, 25)]
random_v_li = [PICK([v, v * -1]) for v in random_v_li]
random_c_li = [PICK(colors) for i in range(0, 25)]
def _create_random_ball(n):
    X = RND(0.01, 0.99)
    Y = RND(0.01, 0.99)
    R = RND(0.03, 0.05)
    V = RND(0.0005, 0.0075)
    V = PICK([v, v * -1])
    C = PICK(colors)
    return Ball(number=n, center=(X, Y), radius=(R, R), velocity=(V, V), color=C)
def _new_ball_overlaps_with_existing_ball(new_ball, ball_list):
    for ball in ball_list:
        overlapping = _ball_collision(new_ball, ball)
        if overlapping:
            return True
    return False
def _ball_collision(ball_A, ball_B):
    X, Y = ball_A.position
    R = ball_A.radius[0]
    x, y = ball_B.position
    r = ball_B.radius[0]
    Rr_sum_sqd = (R + r) ** 2
    D_sqd = (X - x) ** 2 + (Y - y) ** 2
    if D_sqd < Rr_sum_sqd:
        return True
    else:
        return False
def _new_ball_same_color_as_existing_ball(new_ball, ball_list):
    for ball in ball_list:
        if ball.color == new_ball.color:
            return True
    return False
print(random_x_li)
print(random_y_li)
print(random_r_li)
print(random_v_li)
print(random_c_li)
n = 25
x = [
    0.5175037339301688, 0.1420985979461196, 0.10115673040738829, 0.8698999214100201, 0.23118432436561054, 0.36919242801415164, 0.7756794467080963, 0.9625063996002888, 0.9573948535021484, 0.20406195908750127, 0.0963607324540702, 0.24758928873718006,
    0.11320383763497592, 0.37590302273489684, 0.5719228425065709, 0.4482686777701326, 0.01351849364828031, 0.9329315780285662, 0.35053767016278436, 0.27893997424393835, 0.2838459998291725, 0.6528187402439394, 0.377014398697886, 0.8452442857690814, 0.28166539087244946]
y = [
    0.3881476696698143, 0.8788111393159556, 0.050160979324685974, 0.36013869613512983, 0.7005875720849994, 0.44396907069827823, 0.38189891440845597, 0.20916995082149506, 0.7844484130093899, 0.4082334166781367, 0.8034812791180376, 0.9389044458951076,
    0.9786044383448879, 0.010296800582130967, 0.9149398484570439, 0.6990295316639915, 0.9505861230202809, 0.548875374857731, 0.2237102315468063, 0.1788398704894457, 0.8426455740101372, 0.7886169166469403, 0.8827633027954762, 0.6990889006175189, 0.6284775575167556]
r = [
    0.037495687364266464, 0.044553666884809155, 0.03965817632038192, 0.03281577471086753, 0.030883151425905, 0.03585251417246143, 0.030662192768991934, 0.03942117546969892, 0.04647229749051039, 0.03138823495668127, 0.04538085451110195, 0.037632124299072554,
    0.03679287698790388, 0.044472657105295466, 0.03820386415623078, 0.041035229258501366, 0.044222188739212145, 0.04126191071725904, 0.03684403760715313, 0.039511190393113474, 0.03143636573782051, 0.0478206506927655, 0.04841365144147611, 0.04577290967531645, 0.035955498063077136]
v = [0.006613814831240579, 0.0071102988215877815, -0.004507585292189281, 0.0025621740198407345, 0.00628101390870041, 0.006073439320757991, 0.002600940122894219, 0.004741033502271549, -0.003618121353263072, -0.005884318894583964, -0.003607739931420963, -0.0049595887473790744, -
     0.003684671793771824, 0.004058026293252895, 0.0006662141770424164, 0.0023438664767125228, -0.0045943823513212925, -0.00181901512121161, -0.005776365259231038, -0.004425928897049869, 0.005270293206337968, 0.0011325249715346331, -0.006667058225452233, -0.0034256692666909225, 0.0012576195041123991]
c = ['LightBlue4', 'MediumOrchid2', 'wheat1', 'snow3', 'turquoise', 'pink', 'slate gray', 'IndianRed1', 'PaleGreen1', 'gray99', 'VioletRed1', 'SpringGreen2', 'pink4',
     'LightSalmon3', 'LavenderBlush3', 'OliveDrab1', 'LightGoldenrod3', 'gray61', 'LightSkyBlue2', 'gold4', 'DarkOrchid1', 'magenta4', 'RoyalBlue2', 'dark slate blue', 'goldenrod2']
x = [
    0.17226117860558943, 0.47575703167994643, 0.5310977469705811, 0.6788123899120965, 0.14782679026863998, 0.3834643234665756, 0.43626527115247776, 0.7435293543683047, 0.7157502026419402, 0.6871364076441704, 0.7657368653145123, 0.6343785307307936,
    0.04428287412607597, 0.335746598802746, 0.37153549771946764, 0.11495268624343562, 0.3196286173900872, 0.9712934064738853, 0.5502455628150285, 0.8013907189486008, 0.3786792508276992, 0.9621663415625354, 0.3907512650953692, 0.2792947094151769, 0.3952371614210731]
y = [
    0.7038166712611127, 0.8328892853243548, 0.6539524809279914, 0.7985210942271933, 0.39784216265534356, 0.07321188744698694, 0.8804891312407012, 0.6498998683046555, 0.18208046498926508, 0.48104953610096146, 0.26666960836183107, 0.04124033564068742,
    0.15935511855321918, 0.09906321801359129, 0.07899349268704801, 0.030700630021867403, 0.9299323826115518, 0.42285429585602113, 0.4959756752529858, 0.9524161843449893, 0.7966742167169455, 0.13463029303657212, 0.9090911025326663, 0.3961792638477944, 0.8331774776077013]
r = [
    0.030736127974805183, 0.03094552833025137, 0.03236475133447421, 0.03745834165072936, 0.047958750782319495, 0.04487584660495424, 0.03621696397088677, 0.04035042286724969, 0.035424602800834086, 0.04595118976645379, 0.03661875203035087, 0.03543718679493385,
    0.03466878230772731, 0.03412801903658493, 0.04615221284461329, 0.03330533548876083, 0.0384064953139615, 0.04742514239088494, 0.03269076265105624, 0.03264096981060516, 0.03771608141455707, 0.0466717086541206, 0.04491695932489235, 0.04337086349830063, 0.03849446680326833]
v = [
    0.006443678005996722, 0.005018953772860319, -0.004210941281019155, 0.007052349668313817, -0.004542495773850241, -
    0.0018077969482040805, 0.006358005456015888, 0.0032456201882326927, -0.0060415488847359086, -0.0008060286498633643, 0.0042504601625680035, -0.0061446858983580915,
    0.0042146407120273194, 0.006309021042086383, 0.0007164218671650722, -0.006873308196108756, 0.0007032962487919319, 0.004202757053552042, -0.0008609223860815683, 0.006548924965378221, 0.0028090937494441716, -0.003810900643671578, 0.004165751802680574, 0.006839369333305324, -0.0029906548629303514]
c = ['gray84', 'DarkSeaGreen1', 'medium turquoise', 'green4', 'gray13', 'AntiqueWhite4', 'IndianRed3', 'OrangeRed4', 'khaki3', 'gray1', 'PaleTurquoise4', 'dark slate blue',
     'DeepSkyBlue2', 'papaya whip', 'PaleTurquoise4', 'DarkGoldenrod2', 'SlateBlue2', 'LightSteelBlue4', 'blue2', 'gray75', 'violet red', 'snow', 'gray52', 'turquoise1', 'gray32']
ball_options = BallOptionsSeeded(n, x, y, r, v, c)
print(_create_random_ball(0).position)
ball_list = []
for n in range(0, n):
    while True:
        new_ball = _create_random_ball(n)
        new_ball_XY_OK = not _new_ball_overlaps_with_existing_ball(new_ball, ball_list)
        new_ball_color_OK = not _new_ball_same_color_as_existing_ball(new_ball, ball_list)
        if new_ball_XY_OK and new_ball_color_OK:
            break
    ball_list.append(new_ball)
for ball in ball_list:
    print(ball)
